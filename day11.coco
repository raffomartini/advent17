'''--- Day 11: Hex Ed ---

Crossing the bridge, you've barely reached the other side of the stream when a program comes up to you, clearly in distress. "It's my child process," she says, "he's gotten lost in an infinite grid!"

Fortunately for her, you have plenty of experience with infinite grids.

Unfortunately for you, it's a hex grid.

The hexagons ("hexes") in this grid are aligned such that adjacent hexes can be found to the north, northeast, southeast, south, southwest, and northwest:

  \ n  /
nw +--+ ne
  /    \
-+      +-
  \    /
sw +--+ se
  / s  \
You have the path the child process took. Starting where he started, you need to determine the fewest number of steps required to reach him. (A "step" means to move from the hex you are in to any adjacent hex.)

For example:

ne,ne,ne is 3 steps away.
ne,ne,sw,sw is 0 steps away (back where you started).
ne,ne,s,s is 2 steps away (se,se).
se,sw,se,sw,sw is 3 steps away (s,s,sw).
'''

# https://www.redblobgames.com/grids/hexagons/


import collections

FILE = 'input11.txt'

Hex = collections.namedtuple("Hex", ["x", "y", "z"])

def distance(pos):
    return pos |> map$(abs) |> max

def move(origin, 'n') = Hex(origin.x, origin.y+1, origin.z-1)

@addpattern(move)
def move(origin, 'nw') = Hex(origin.x -1, origin.y+1, origin.z)

@addpattern(move)
def move(origin, 'nw') = Hex(origin.x -1, origin.y+1, origin.z)

@addpattern(move)
def move(origin, 'sw') = Hex(origin.x -1, origin.y, origin.z+1)

@addpattern(move)
def move(origin, 's') = Hex(origin.x, origin.y-1, origin.z+1)

@addpattern(move)
def move(origin, 'se') = Hex(origin.x +1, origin.y-1, origin.z)

@addpattern(move)
def move(origin, 'ne') = Hex(origin.x +1, origin.y, origin.z-1)

def part1(file):
    '''
    Manhattan distance for hex from origin
    '''
    with open(file) as f:
        instructions = f.read().rstrip().split(',')
    origin = Hex(0,0,0)
    end = instructions |> reduce$(move,?,origin)
    return distance(end)

'''
--- Part Two ---

How many steps away is the furthest he ever got from his starting position?
'''

def part2(file):
    '''
    Manhattan distance for hex from origin
    '''
    def move_and_check(state, direction):
        max_distance, origin = state
        end = move(origin,direction)
        current_distance = distance(end)
        if current_distance > max_distance:
            max_distance = current_distance
        return max_distance, end,

    with open(file) as f:
        instructions = f.read().rstrip().split(',')
    origin = Hex(0,0,0)
    state = (0, origin)
    max_distance, end = instructions |> reduce$(move_and_check,?,state)
    return max_distance


'*-'*55 |> print
part1(FILE) |> 'Part1: {}'.format |> print
'*-'*55 |> print
part2(FILE) |> 'Part2: {}'.format |> print




