'''
--- Day 16: Permutation Promenade ---
You come upon a very unusual sight; a group of programs here appear to be dancing.

There are sixteen programs in total, named a through p. They start by standing in a line: a stands in position 0, b stands in position 1, and so on until p, which stands in position 15.

The programs' dance consists of a sequence of dance moves:

Spin, written sX, makes X programs move from the end to the front, but maintain their order otherwise. (For example, s3 on abcde produces cdeab).
Exchange, written xA/B, makes the programs at positions A and B swap places.
Partner, written pA/B, makes the programs named A and B swap places.
For example, with only five programs standing in a line (abcde), they could do the following dance:

s1, a spin of size 1: eabcd.
x3/4, swapping the last two programs: eabdc.
pe/b, swapping programs e and b: baedc.
After finishing their dance, the programs end up in order baedc.

You watch the dance for a while and record their dance moves (your puzzle input). In what order are the programs standing after their dance?
'''

FILE = 'input16.txt'
LEN = 16
PROGRAMS = range(ord('a'),ord('a')+LEN) |> map$(chr) |> tuple

sample = 'abcde' |> tuple

def dance(programs,'s'+x):
    x = int(x)
    return programs[-x:] + programs[:-x]

def swap(programs,a,b):
    programs = list(programs)
    programs[a], programs[b] = programs[b], programs[a]
    return programs |> tuple

@addpattern(dance)
def dance(programs,'x'+ab):
    a,b = ab.split('/') |> fmap$(int)
    return swap(programs,a,b)

@addpattern(dance)
def dance(programs,'p'+ab, ):
    a,b = ab.split('/') |> map$(programs.index) |> tuple
    return swap(programs,a,b)

def part1():
    sample = 'abcde' |> tuple
    ['s1','x3/4','pe/b'] |> reduce$(dance,?,sample) #  ('b', 'a', 'e', 'd', 'c')
    with open(FILE) as f:
        instr = f.read().rstrip().split(',')
    final = instr |> reduce$(dance,?,PROGRAMS)
    return ''.join(final)

'''
--- Part Two ---
Now that you're starting to get a feel for the dance moves, you turn your attention to the dance as a whole.

Keeping the positions they ended up in from their previous dance, the programs perform it again and again: including the first dance, a total of one billion (1000000000) times.

In the example above, their second dance would begin with the order baedc, and use the same dance moves:

s1, a spin of size 1: cbaed.
x3/4, swapping the last two programs: cbade.
pe/b, swapping programs e and b: ceadb.
In what order are the programs standing after their billion dances?
'''

BILLION = 1000000000
PERCENTAGE = BILLION//100

def part2():
    with open(FILE) as f:
        instr = f.read().rstrip().split(',')
    def first_part(programs,instr):
        return instr |> reduce$(dance,?,programs)
    # out_ = first_part(PROGRAMS,instr)
    # sequence =  out_ |> map$(PROGRAMS.index) |> tuple
    # def iteration(programs,n=0):
    #     # if n % PERCENTAGE == 0:
    #     #     print('Progress: {}%'.format(n//BILLION))
    #     return sequence |> map$(programs[]) |> tuple
    def iteration(programs,n):
        return first_part(programs,instr)
    def period(in_,n=0):
        out_ = first_part(in_,instr)
        if out_ == PROGRAMS:
            return n + 1
        return period(out_,n+1)
    period_ = period(PROGRAMS)
    final = range(BILLION%period_) |> reduce$(iteration,?,PROGRAMS) |> ''.join
    # final = range(BILLION) |> reduce$(iteration,?,PROGRAMS)
    return final


part1() |> 'Part1: {}'.format |> print
'&*'*55 |> print
part2() |> 'Part2: {}'.format |> print

