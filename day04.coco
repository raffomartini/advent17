'''
--- Day 4: High-Entropy Passphrases ---

A new system policy has been put in place that requires all accounts to use a passphrase instead of simply a password. A passphrase consists of a series of words (lowercase letters) separated by spaces.

To ensure security, a valid passphrase must contain no duplicate words.

For example:

aa bb cc dd ee is valid.
aa bb cc dd aa is not valid - the word aa appears more than once.
aa bb cc dd aaa is valid - aa and aaa count as different words.
The system's full passphrase list is available as your puzzle input. How many passphrases are valid?
'''

'''
--- Part Two ---

For added security, yet another system policy has been put in place. Now, a valid passphrase must contain no two words that are anagrams of each other - that is, a passphrase is invalid if any word's letters can be rearranged to form any other word in the passphrase.

For example:

abcde fghij is a valid passphrase.
abcde xyz ecdab is not valid - the letters from the third word can be rearranged to form the first word.
a ab abc abd abf abj is a valid passphrase, because all letters need to be used when forming another word.
iiii oiii ooii oooi oooo is valid.
oiii ioii iioi iiio is not valid - any of these words can be rearranged to form any other word.
Under this new system policy, how many passphrases are valid?
'''


from collections import Counter

PUZZLE_FILE = 'input04.txt'

def load(file):
    'returns iterable w lines splitted by words'
    with open(file) as f:
        lines = f.readlines()
        return lines |> map$((line)-> line.split())

def part1(file):
    pwds = load(file)
    # line = pwds[0]         # ['vxjtwn', 'vjnxtw', 'sxibvv', 'mmws', 'wjvtxn', 'icawnd', 'rprh']
    # repeats = line |> map$(line.count) |> list      # [1, 1, 1, 1, 1, 1, 1]
    # repeat = (line.count(x) for x in line) # (1, 1, 1, 1, 1, 1, 1)
    # ( repeats |> reduce$((r,x)->r+1 if x>1 else r,?,0) ) > 0      # False
    # line |> map$(line.count) |> reduce$((r,x)->r+1 if x>1 else r,?,0) # 0
    # ( line |> map$(line.count) |> reduce$((r,x)->r+1 if x>1 else r,?,0) ) > 0
    # finally
    # process_line = (line) -> ( line |> map$(line.count) |> reduce$((r,x)->r+1 if x>1 else r,?,0) ) > 0
    def process_line(line):
        repeat = (line.count(x) for x in line) |> tuple
        return ( repeat |> reduce$((r,x)->r+1 if x>1 else r,?,0) ) > 0
    valid_passcode = filter$((x)->(x is False))

    return pwds |> map$(process_line) |> valid_passcode |> tuple |> len

def part2(file):
    def load(file):
        'returns iterable w lines splitted by words as set'
        with open(file) as f:
            lines = f.readlines()
            line_to_sets = (line) -> line.split() |> map$(set) |> tuple
            return lines |> map$(line_to_sets)

    def process_line(line):
        # Returns True is there are no "duplicated" words
        repeats = line |> map$((x) -> line.count(x) == 1)
        return repeats |> all

    # line = pwd[0]         # ['vxjtwn', 'vjnxtw', 'sxibvv', 'mmws', 'wjvtxn', 'icawnd', 'rprh']
    # line |> process_line  # True
    return file |> load |> map$(process_line) |> sum


    return pwds |> map$(process_line) |> valid_passcode |> tuple |> len

if __name__ == '__main__':
    '-'*69 |> print
    print('Part1: ', PUZZLE_FILE |> part1)
    '-'*69 |> print
    print('Part2: ', PUZZLE_FILE |> part2)
    '-'*69 |> print








